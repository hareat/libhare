#ifndef HARE_FUNCTIONAL
#define HARE_FUNCTIONAL

#include <functional>

/***************************************************************
 * hare/functional handy convenience methods for functional.
 *
 * @author Hannes Reisinger github@HaRe.at
 ***************************************************************/

#include <hare/cstring>

namespace hare {
	/***************************************************************
	 * Operations are templated instead of the classes (like std)
	 * and also take care about zero terminated strings.
	 ***************************************************************/

	struct equal_to {
		typedef bool result_type;

		template<typename T>
		bool operator()(const T& t1, const T& t2) const {
			return t1 == t2;
		}
		bool operator()(const char *sz1, const char *sz2) const {
			return hare::strcmp(sz1, sz2) == 0;
		}
	};

	struct greater {
		typedef bool result_type;

		template<typename T>
		bool operator()(const T& t1, const T& t2) const {
			return t1 > t2;
		}
		bool operator()(const char *sz1, const char *sz2) const {
			return hare::strcmp(sz1, sz2) > 0;
		}
	};

	struct greater_equal {
		typedef bool result_type;

		template<typename T>
		bool operator()(const T& t1, const T& t2) const {
			return t1 >= t2;
		}
		bool operator()(const char *sz1, const char *sz2) const {
			return hare::strcmp(sz1, sz2) >= 0;
		}
	};

	struct less {
		typedef bool result_type;

		template<typename T>
		bool operator()(const T& t1, const T& t2) const {
			return t1 < t2;
		}
		bool operator()(const char *sz1, const char *sz2) const {
			return hare::strcmp(sz1, sz2) < 0;
		}
	};

	struct less_equal {
		typedef bool result_type;

		template<typename T>
		bool operator()(const T& t1, const T& t2) const {
			return t1 <= t2;
		}
		bool operator()(const char *sz1, const char *sz2) const {
			return hare::strcmp(sz1, sz2) <= 0;
		}
	};

	struct not_equal_to {
		typedef bool result_type;

		template<typename T>
		bool operator()(const T& t1, const T& t2) const {
			return t1 != t2;
		}
		bool operator()(const char *sz1, const char *sz2) const {
			return hare::strcmp(sz1, sz2) != 0;
		}
	};


	/***************************************************************
	 * Some small extensions.
	 ***************************************************************/

	// In the sense of a closed interval [left, right] (or inclusive like SQL BETWEEN).
	template<class T>
	struct between_t {
		typedef bool result_type;
		typedef T argument_type;

		const T& lower_bound, upper_bound;
		between_t(const T& _lower_bound, const T& _upper_bound) : lower_bound(_lower_bound), upper_bound(_upper_bound) {}
		bool operator()(const T& value) const { return lower_bound <= value && value <= upper_bound; }
	};
	template<class T>
	between_t<T> betweener(const T& lower_bound, const T& upper_bound) { return between_t<T>(lower_bound, upper_bound); }
	// additionally takes care if right is smaller than left
	template<class T>
	between_t<T> betweener2(const T& left, const T& right) {
		if (left <= right)
			return between_t<T>(left, right);
		else
			return between_t<T>(right, left);
	}
}	// namespace hare

#endif	// HARE_FUNCTIONAL
