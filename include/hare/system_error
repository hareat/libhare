#ifndef HARE_SYSTEM_ERROR
#define HARE_SYSTEM_ERROR

#include <system_error>

/**************************************************************************
 * <hare/system_error> handy convenience methods for <system_error>.
 *
 * @author Hannes Reisinger github@HaRe.at
 **************************************************************************/

#include <hare/execinfo.h>	// backtrace
#include <hare/strprintf>

#include <errno.h>

namespace hare {
	/**********************************************************************
	 * In most cases I want to create a system_error with a system_category
	 * and use the current errno.
	 * And a backtrace is often helpful in error analysis.
	 * If compiled with BACKTRACE_SIZE=n the backtrace of the
	 * exceptional situation is also stored into the system_error
	 * and can easily be printed by ex.backtrace_write(2).
	 * Only useful if you compile with -g to use addr2line -e exe addr
	 **********************************************************************/
	struct system_error : public std::system_error, public hare::backtrace {
		system_error() : std::system_error(errno, std::system_category()) {}
		system_error(const std::string& what_arg) : std::system_error(errno, std::system_category(), what_arg) {}
		system_error(const char *what_arg) : std::system_error(errno, std::system_category(), what_arg) {}
		template<typename ... Args>
		system_error(const char *format, Args ... args)
			: std::system_error(errno, std::system_category(), strprintf<256>(format, args ...)) {}

		// useful shortcuts
		int value() const { return code().value(); }
		std::string message() const { return code().message(); }

		// errno would be nice but I have found no way to do it
		int errorno() const { return code().value(); }
	};
}	// namespace hare

#endif	// HARE_SYSTEM_ERROR
