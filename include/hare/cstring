#ifndef HARE_CSTRING
#define HARE_CSTRING

#include <cstring>

/***************************************************************
 * hare/cstring handy convenience methods for cstring.
 *
 * @author Hannes Reisinger github@HaRe.at
 ***************************************************************/

#include <errno.h>

namespace hare {
	/***************************************************************
	 * std functions don't like nullptr.
	 ***************************************************************/

	inline char* strcat(char *dest, const char *src) {
		return (dest && src) ? std::strcat(dest, src) : dest;
	}

	inline const char* strchr(const char *sz, int c) {
		return sz ? std::strchr(sz, c) : nullptr;
	}
	inline char* strchr(char *sz, int c) {
		return sz ? std::strchr(sz, c) : nullptr;
	}

	inline int strcmp(const char *left, const char *right) {
		if (left == right)	// maybe both are nullptr
			return 0;
		else if (!left)
			return -1;
		else if (!right)
			return 1;
		else
			return std::strcmp(left, right);
	}

	inline size_t strlen(const char *sz) {
		return sz ? std::strlen(sz) : 0;
	}

	inline char* strdup(const char *sz) {
		if (sz) {
			return ::strdup(sz);
		} else {
			errno = EINVAL;
			return nullptr;
		}
	}
	inline char* strndup(const char *sz, size_t n) {
		if (sz) {
			return ::strndup(sz, n);
		} else {
			errno = EINVAL;
			return nullptr;
		}
	}

	inline size_t strspn(const char *sz, const char *accept) {
		return (sz && accept) ? std::strspn(sz, accept) : 0;
	}
	inline size_t strcspn(const char *sz, const char *reject) {
		return std::strcspn(sz ? sz : "", reject ? reject : "");
	}

	inline const char* strstr(const char *haystack, const char *needle) {
		return (haystack && needle) ? std::strstr(haystack, needle) : nullptr;
	}
	inline char* strstr(char *haystack, const char *needle) {
		return (haystack && needle) ? std::strstr(haystack, needle) : nullptr;
	}


	/***************************************************************
	 * Some small extensions.
	 ***************************************************************/

	bool between(const char *lower_bound, const char *value, const char *upper_bound) {
		return hare::strcmp(lower_bound, value) <= 0 && hare::strcmp(value, upper_bound) <= 0;
	}
	// additionally takes care if right is smaller than left
	bool between2(const char *left, const char *value, const char *right) {
		if (hare::strcmp(left, right) <= 0)
			return hare::strcmp( left, value) <= 0 && hare::strcmp(value, right) <= 0;
		else
			return hare::strcmp(right, value) <= 0 && hare::strcmp(value,  left) <= 0;
	}
}	// namespace hare

#endif	// HARE_CSTRING
