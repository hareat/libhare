#ifndef HARE_STDEXCEPT
#define HARE_STDEXCEPT

#include <stdexcept>

/***************************************************************************
 * In most cases I want to create an invalid_argument based on current
 * information.
 *
 * @author Hannes Reisinger github@HaRe.at
 **************************************************************************/

#include <hare/strprintf>

namespace hare {
	struct invalid_argument : public std::invalid_argument {
		template<typename ... Args>
		invalid_argument(const char *format, Args ... args)
			: std::invalid_argument(strprintf<256>(format, args ...)) {}
	};
}	// namespace hare


#define CHECK_NOT_NULL_ARG1(a) \
	if (a == NULL) \
		throw hare::invalid_argument("%s(%s is NULL)", __func__, #a);

#define CHECK_NOT_NULL_ARG2(a, b) \
	if (a == NULL || b == NULL) { \
		if (a == NULL && b == NULL) \
			throw hare::invalid_argument("%s(%s and %s are NULL)", __func__, #a, #b); \
		throw hare::invalid_argument("%s(%s is NULL)", __func__, (a == NULL) ? #a : #b); \
	}

#define CHECK_NOT_NULL_ARG3(a, b, c) \
	if (a == NULL || b == NULL || c == NULL) { \
		int argc = 0;	\
		const char *argv[3] = {0};	\
		if (a == NULL)		\
			argv[argc++] = #a;	\
		if (b == NULL)		\
			argv[argc++] = #b;	\
		if (c == NULL)		\
			argv[argc++] = #c;	\
		if (argc == 1) \
			throw hare::invalid_argument("%s(%s is NULL)", __func__, argv[0]);	\
		if (argc == 2) \
			throw hare::invalid_argument("%s(%s and %s are NULL)", __func__, argv[0], argv[1]); \
		throw hare::invalid_argument("%s(%s, %s and %s are NULL)", __func__, #a, #b, #c); \
	}

#endif	// HARE_STDEXCEPT
