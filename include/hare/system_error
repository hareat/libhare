#ifndef HARE_SYSTEM_ERROR
#define HARE_SYSTEM_ERROR

#include <system_error>

/**************************************************************************
 * <hare/system_error> handy convenience methods for <system_error>.
 *
 * @author Hannes Reisinger github@HaRe.at
 **************************************************************************/

#include <hare/strprintf>

#include <errno.h>
#ifdef BACKTRACE_SIZE
#include <execinfo.h>	// backtrace
#endif	// BACKTRACE_SIZE

namespace hare {
	/**********************************************************************
	 * In most cases I want to create a system_error with a system_category
	 * and use the current errno.
	 **********************************************************************/
	struct system_error : public std::system_error {
#ifdef BACKTRACE_SIZE
		/******************************************************************
		 * If compiled with BACKTRACE_SIZE=n the backtrace of the
		 * exceptional situation is also stored into the system_error
		 * and can easely be printed by ex.backtrace_write(2).
		 * Only useful if you compile with -g to use addr2line -e exe addr
		 ******************************************************************/
		system_error() : std::system_error(errno, std::system_category())
			{ m_backtrace_size = backtrace(m_backtrace, BACKTRACE_SIZE); }
		system_error(const std::string& what) : std::system_error(errno, std::system_category(), what)
			{ m_backtrace_size = backtrace(m_backtrace, BACKTRACE_SIZE); }
		system_error(const char *what) : std::system_error(errno, std::system_category(), what)
			{ m_backtrace_size = backtrace(m_backtrace, BACKTRACE_SIZE); }
		template<typename ... Args>
		system_error(const char *format, Args ... args)
			: std::system_error(errno, std::system_category(), strprintf<256>(format, args ...))
			{ m_backtrace_size = backtrace(m_backtrace, BACKTRACE_SIZE); }

		char** backtrace_symbols() const { return ::backtrace_symbols(m_backtrace, m_backtrace_size); }
		void backtrace_write(int fd) const { backtrace_symbols_fd(m_backtrace, m_backtrace_size, fd); }

	private:
		void *m_backtrace[BACKTRACE_SIZE];
		int   m_backtrace_size;
#else	// BACKTRACE_SIZE
		system_error() : std::system_error(errno, std::system_category()) {}
		system_error(const std::string& what) : std::system_error(errno, std::system_category(), what) {}
		system_error(const char *what) : std::system_error(errno, std::system_category(), what) {}
		template<typename ... Args>
		system_error(const char *format, Args ... args)
			: std::system_error(errno, std::system_category(), strprintf<256>(format, args ...)) {}
#endif	// BACKTRACE_SIZE

		// shortcuts
		// errno would be nice but I have found no way to do it
		int errorno() const { return code().value(); }
		int value() const { return code().value(); }
		std::string message() const { return code().message(); }
	};
}	// namespace hare

#endif	// HARE_SYSTEM_ERROR
