#ifndef HARE_WRAP_CSTDIO
#define HARE_WRAP_CSTDIO

#include <cstdio>

/***************************************************************************
 * hare/cstdio some convenience helper for cstdio.
 *
 * Encapsulates std C pointers to ensure close is called also in case
 * of an exception.
 *
 * @usage
 * 	const char *path = <your path>;
 *	const hare::wrap::FILE fp(fopen(path, "w"));
 *	if (!fp)
 *		perror(path);
 *	else {
 *		fputs(<your data>, fp);
 *		...
 *	<automatically closes an open FILE pointer also in case of an exception>
 * or simpler
 *	const hare::wrap::FILE fp(hare::throws::fopen(<your path>, "w"));
 *	hare::throws::fputs(<your data>, fp);
 *	...
 *	<automatically closes an open FILE pointer also in case of an exception>
 *
 * @author Hannes Reisinger github@HaRe.at
 ***************************************************************************/

#include <hare/system_error>

namespace hare {
	namespace wrap {
		/******************************************************************
		 * hare::wrap::FILE encapsulates a std C FILE pointer to ensure
		 * fclose() is called also in case of an exception.
		 ******************************************************************/
		class FILE {
			std::FILE *m_fp;	// the encapsulated std C FILE pointer
		public:
			FILE() : m_fp(0) {}
			FILE(::FILE *fp) : m_fp(fp) {}

			~FILE() { if (m_fp) std::fclose(m_fp); }

			FILE& operator=(std::FILE *fp) {
				if (m_fp)
					std::fclose(m_fp);
				m_fp = fp;
				return *this;
			}

			// use std::shared_ptr instead
			FILE(const FILE&) = delete;
			FILE& operator=(const FILE&) = delete;

			// @see man 3 fclose
			// Upon successful completion 0 is returned.
			// Otherwise, EOF is returned and errno is set to indicate the error.
			int fclose() {
				if (m_fp) {
					const int result = std::fclose(m_fp);
					m_fp = 0;
					return result;
				}
				else
					return 0;
			}

			// to use it like a std C FILE pointer
			operator ::FILE*() const { return m_fp; }
		};

		/******************************************************************
		 * hare::wrap::PIPE encapsulates a std C FILE pointer to ensure
		 * pclose() is called also in case of an exception.
		 ******************************************************************/
		class PIPE {
			std::FILE *m_fp;	// the encapsulated std C FILE pointer
		public:
			PIPE() : m_fp(0) {}
			PIPE(::FILE *fp) : m_fp(fp) {}

			~PIPE() { if (m_fp) ::pclose(m_fp); }

			PIPE& operator=(std::FILE *fp) {
				if (m_fp)
					::pclose(m_fp);
				m_fp = fp;
				return *this;
			}

			// use std::shared_ptr instead
			PIPE(const PIPE&) = delete;
			PIPE& operator=(const PIPE&) = delete;

			// @see man 3 pclose
			// Upon successful completion 0 is returned.
			// Otherwise, EOF is returned and errno is set to indicate the error.
			int pclose() {
				if (m_fp) {
					const int result = ::pclose(m_fp);
					m_fp = 0;
					return result;
				}
				else
					return 0;
			}

			// to use it like a std C FILE pointer
			operator ::FILE*() const { return m_fp; }
		};
	}	// namespace wrap

	namespace throws {
		inline void fclose(hare::wrap::FILE &file) {
			if (file.fclose() == EOF)	// see (1) in hare/throws/stdio.h
				throw hare::system_error("%s() failed", __func__);
		}

		inline void pclose(hare::wrap::PIPE &pipe) {
			if (pipe.pclose() == EOF)	// see (1) in hare/throws/stdio.h
				throw hare::system_error("%s() failed", __func__);
		}
	}	// namespace throws
}	// namespace hare


// to avoid accidentally calls
int fclose(hare::wrap::FILE &file) { return file.fclose(); }
int pclose(hare::wrap::PIPE &pipe) { return pipe.pclose(); }

#endif	// HARE_WRAP_CSTDIO
