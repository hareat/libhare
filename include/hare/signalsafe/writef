#ifndef HARE_SIGNALSAFE_WRITEF
#define HARE_SIGNALSAFE_WRITEF

/***************************************************************
 * hare/signalsafe/writef async-signal-safe functions for writing
 * a printf formatted string.
 * Necessary because in a singal hander we can not use *printf.
 * Very very limited implementation, just do %c, %d, %o, %x and %s,
 * espacially %f should be avoided.
 *
 * @author Hannes Reisinger github@HaRe.at
 ***************************************************************/

#include <hare/signalsafe/write>

#include <stdarg.h>	// va_*()

namespace hare {
	namespace signalsafe {
		// filles from the tail and returns the address of the starting
		// position of the unsigned long integer as string.
		inline char* ultoa(unsigned long n, char *buf, size_t size, const int base, const bool upper_case = false) {
			if (!buf || !size)
				return buf;
			buf[--size] = '\0';
			if (base < 2 || 36 < base)
				return buf;
			while (size) {
				const unsigned int digit = n % base;
				char ch = '\0';
				if (digit < 10)
					ch = digit + '0';
				else
					ch = digit - 10 + (upper_case ? 'A' : 'a');
				buf[--size] = ch;

				n /= base;
				if (n == 0)
					return buf + size;
			}
			// error: buffer is not big enough
			buf[0] = '\0';
			return buf;
		}
		template<size_t size>
		char* ultoa(unsigned long n, char (&ach)[size], const int base, const bool upper_case = false) {
			return ultoa(n, ach, size, base, upper_case);
		}

		// filles from the tail and returns the address of the starting
		// position of the long integer as string.
		inline char* ltoa(long n, char *buf, size_t size, const int base, const bool upper_case = false) {
			if (n >= 0) {
				return ultoa(n, buf, size, base, upper_case);
			} else {
				char *result = ultoa(-n, buf, size, base, upper_case);
				if (result != buf) {
					--result;
					*result = '-';
					return result;
				} else if (!buf || !size) {
					return buf;
				} else {
					// error: buffer is not big enough
					buf[0] = '\0';
					return buf;
				}
			}
		}
		template<size_t size>
		char* ltoa(long n, char (&ach)[size], const int base, const bool upper_case = false) {
			return ltoa(n, ach, size, base, upper_case);
		}

		// filles from the tail and returns the address of the starting
		// position of the unsigned integer as string.
		inline char* uitoa(unsigned int n, char *buf, size_t size, const int base, const bool upper_case = false) {
			return ultoa(n, buf, size, base, upper_case);
		}
		template<size_t size>
		char* uitoa(unsigned int n, char (&ach)[size], const int base, const bool upper_case = false) {
			return uitoa(n, ach, size, base, upper_case);
		}

		// filles from the tail and returns the address of the starting
		// position of the integer as string.
		inline char* itoa(int n, char *buf, size_t size, const int base, const bool upper_case = false) {
			return ltoa(n, buf, size, base, upper_case);
		}
		template<size_t size>
		char* itoa(int n, char (&ach)[size], const int base, const bool upper_case = false) {
			return itoa(n, ach, size, base, upper_case);
		}

		inline ssize_t writef(int fd, const char *format, ...) {
			if (!format || *format == '\0')
				return 0;

			va_list ap;
			va_start(ap, format);
			ssize_t result = 0;

			const char *start = format, *end = format;
			while (*end) {
				if (*end == '%') {
					// print the processed characters
					hare::signalsafe::write(fd, start, end - start);
					start = ++end;	// skip %
					switch (*end) {
						case 'c': {
							const char ch = va_arg(ap, int);
							hare::signalsafe::write(fd, &ch, 1);
							start = ++end;	// skip 'c'
							break;
						}
						case 'd':
						case 'o':
						case 'X':
						case 'x': {
							char buffer[55] = "";
							hare::signalsafe::write(fd, itoa(va_arg(ap, int), buffer,
								(*end == 'd') ? 10 : ((*end == 'x') ? 16 : 8),
								*end == 'X'));	// upper case or lower case
							start = ++end;	// skip 'd', 'o' or 'x'
							break;
						}
						case 'P':
						case 'p': {
							char buffer[55] = "";
							hare::signalsafe::write(fd, ultoa((unsigned long) va_arg(ap, void*), buffer, 16,
								*end == 'P'));	// upper case or lower case
							start = ++end;	// skip 'p'
							break;
						}
						case 's':
							hare::signalsafe::write(fd, va_arg(ap, char *));
							start = ++end;	// skip 's'
							break;

						case '%':
							// start stays the same and therefore the % char
							// will be printed at the next opportunity
							break;
					}
				}
				++end;
			}
			// print the remaining processed characters
			hare::signalsafe::write(fd, start, end - start);

			va_end(ap);
			return result;
		}
	}	// namespace signalsafe
}	// namespace hare

#endif	// HARE_SIGNALSAFE_WRITEF
